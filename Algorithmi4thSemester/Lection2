#include <iostream>
#include <vector>
#include <map>

using namespace std;
/*
findPaIR
Най-голяма стойност. Даденa е редица a1, a2, …, an от целиположителни числа. Да се намери двойка цели числа (ai, aj).
Sample input: 5  5 2 3 4 1 // Sample output: 5 4

getCount
Петър много обичал математиката и по-точно обичал да групира по
различен начин различни числа. Веднъж Петър си намислил три цели числа X,
Y и Z. След това създал групи от по три числа (x, y, z), където 1 < x ≤ X, 1 < y ≤ Y
и 1 < z ≤ Z и се опитал да намери броя на тройките (x, y, z), които задоволяват
условието x * z > y2, но не успял. Напишете програма, която да помогне на
Петър да намери броя на тройките (x, y, z), за които x * z > y2, където 1 < x ≤ X, 1< y ≤ Y и 1 < z ≤ Z.

Sample input: 3 2 2 // Sample output: 6
Sample input: 3 3 3 // Sample output: 11
*/
void findPaIR(int n, int arr[])
{
	if (n < 2)
	{
		cout << "-1" << endl;
		return;
	}

	int x = -9999999;
	int y;
	for (int i = 0; i < n; ++i)
	{
		if (arr[i] == x)
		{
			continue;
		}

		if (arr[i] > x)
		{
			y = x;
			x = arr[i];
		}
		else if (arr[i] > y)
		{
			y = arr[i];
		}
	}
	cout << "The biggest two number in array are "<<x << " " << y << endl;
}


int getCount(int X, int Y, int Z)
{
	int br = 0;
	for (int x = 1; x < X; ++x)
	{
		int z = (Y / x) + 1;
		if (Z >= z)
			br = (br + (Z - z) + 1);

		if (X >= z && Z >= x)
			br = (br + (Z - x + 1) * (X - z + 1));

		if (X >= z)
			X = z - 1;
	}
	return br;
}

int countTRiplets(int X, int Y, int Z)
{
	int br = 0;
	for (int y = 1; y < Y; ++y)
	{
		br = (br + getCount(X, y * y, Z));
	}
	return br;
}

bool determinantValue(int x1, int y1, int x2, int y2, int x3, int y3) {
	return (x1 * (y2 - y3) - y1 * (x2 - x3) + 1 * (x2 * y3 - y2 * x3)) != 0;
}

int countPointsMakeTriangle(std::map<int, std::vector<int>>& point, int n) {
	int counter = 0;
	for (int i = 0; i < n; ++i) {
		for (int j = i + 1; j < n; ++j) {
			for (int k = j + 1; k < n; ++k) {
				if (determinantValue(point[i][0], point[i][1], point[j][0], point[j][1],
					point[k][0], point[k][1])) {
					counter++;
				}
			}
		}
	}
	return counter;
}

int main()
{
	int arr_len = 5;
	int arr[5] = { 5, 2, 3, 4, 9 };
	findPaIR(arr_len, arr);
	cout << "The count of triples (x, y, z), which are a solution to (x * z > y2) is - "<<countTRiplets(3, 3, 3) << endl;
	int n;
	cout << "Ex.3 - Enter the numbers of points \n";
	cin >> n;

	std::map<int, std::vector<int>> dict_pointers;
	for (int i = 0; i < n; ++i) {
		cout << "Enter x and y for Point[" << i << "] in new line\n";
		int x, y;
		cin >> x >> y;
		dict_pointers[i] = { x, y };
	}
	cout << "You can make " << countPointsMakeTriangle(dict_pointers, n) << " triangle with that points" << endl;
}
